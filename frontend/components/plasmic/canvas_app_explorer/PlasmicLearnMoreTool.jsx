// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mXv5TZ5SUPGRneH9RoMn6q
// Component: 50HKxnb8xJ
import * as React from "react";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import "../plasmic__default_style.css"; // plasmic-import: global/defaultcss
import "./plasmic_canvas_app_explorer.css"; // plasmic-import: mXv5TZ5SUPGRneH9RoMn6q/projectcss
import "./PlasmicLearnMoreTool.css"; // plasmic-import: 50HKxnb8xJ/css

export const PlasmicLearnMoreTool__VariantProps = new Array();

export const PlasmicLearnMoreTool__ArgProps = new Array();

function PlasmicLearnMoreTool__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return false ? (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        "plasmic_default__all",
        "plasmic_default__div",
        "__wab_text",
        "root_reset_mXv5TZ5SUPGRneH9RoMn6q",
        "LearnMoreTool__root__eoGd4"
      )}
    >
      <React.Fragment>
        <React.Fragment>{""}</React.Fragment>
        <span
          className={"plasmic_default__all plasmic_default__span"}
          style={{ fontWeight: 700 }}
        >
          {"Tool"}
        </span>
        <React.Fragment>{"\nZoom"}</React.Fragment>
      </React.Fragment>
    </div>
  ) : null;
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicLearnMoreTool__ArgProps,
      internalVariantPropNames: PlasmicLearnMoreTool__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicLearnMoreTool__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLearnMoreTool";
  } else {
    func.displayName = `PlasmicLearnMoreTool.${nodeName}`;
  }
  return func;
}

export const PlasmicLearnMoreTool = Object.assign(
  // Top-level PlasmicLearnMoreTool renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicLearnMoreTool
    internalVariantProps: PlasmicLearnMoreTool__VariantProps,
    internalArgProps: PlasmicLearnMoreTool__ArgProps
  }
);

export default PlasmicLearnMoreTool;
/* prettier-ignore-end */
