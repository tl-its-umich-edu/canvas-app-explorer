// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mXv5TZ5SUPGRneH9RoMn6q
// Component: rgvwcoUrD14Pp
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import IconLink from "../../IconLink"; // plasmic-import: sBgr46KDuJYZz/component
import SearchInputComponent from "../../SearchInputComponent"; // plasmic-import: 1ReshBZ5EGa/component
import "@plasmicapp/react-web/lib/plasmic.css";
import "../plasmic__default_style.css"; // plasmic-import: global/defaultcss
import "../library_plasmic_color_type/plasmic_library_plasmic_color_type.css"; // plasmic-import: seaQhLVS4bbjiGvJJrRwyL/projectcss
import "./plasmic_canvas_app_explorer.css"; // plasmic-import: mXv5TZ5SUPGRneH9RoMn6q/projectcss
import "./PlasmicHeader.css"; // plasmic-import: rgvwcoUrD14Pp/css
import SearchIcon from "./icons/PlasmicIcon__Search"; // plasmic-import: XYsIQokGkGcBz/icon

export const PlasmicHeader__VariantProps = new Array(
  "expanded",
  "withSearchBar",
  "noSearchBarOrSettings"
);

export const PlasmicHeader__ArgProps = new Array("searchInputSlot");

function PlasmicHeader__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        "plasmic_default__all",
        "plasmic_default__div",
        "root_reset_mXv5TZ5SUPGRneH9RoMn6q",
        "plasmic_default_styles",
        "plasmic_mixins",
        "plasmic_tokens",
        "plasmic_tokens",
        "Header__root__r4I1P",
        {
          Header__rootexpanded__r4I1Pvp9H7: hasVariant(
            variants,
            "expanded",
            "expanded"
          )
        }
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(
          "plasmic_default__all",
          "plasmic_default__div",
          "Header__freeBox__ikq92",
          {
            Header__freeBoxnoSearchBarOrSettings__ikq92I2VQm: hasVariant(
              variants,
              "noSearchBarOrSettings",
              "noSearchBarOrSettings"
            ),

            Header__freeBoxwithSearchBar__ikq928Xp20: hasVariant(
              variants,
              "withSearchBar",
              "withSearchBar"
            )
          }
        )}
      >
        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            "plasmic_default__all",
            "plasmic_default__div",
            "__wab_text",
            "Header__text__keObZ",
            {
              Header__textwithSearchBar__keObZ8Xp20: hasVariant(
                variants,
                "withSearchBar",
                "withSearchBar"
              )
            }
          )}
        >
          {"Canvas App Explorer"}
        </div>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(
            "plasmic_default__all",
            "plasmic_default__div",
            "Header__freeBox__zcEqf",
            {
              Header__freeBoxwithSearchBar__zcEqf8Xp20: hasVariant(
                variants,
                "withSearchBar",
                "withSearchBar"
              )
            }
          )}
        >
          {(
            hasVariant(variants, "withSearchBar", "withSearchBar") ? true : true
          ) ? (
            <IconLink
              data-plasmic-name={"iconLink"}
              data-plasmic-override={overrides.iconLink}
              className={classNames(
                "__wab_instance",
                "Header__iconLink__rda3A",
                {
                  Header__iconLinknoSearchBarOrSettings__rda3Ai2VQm: hasVariant(
                    variants,
                    "noSearchBarOrSettings",
                    "noSearchBarOrSettings"
                  ),

                  Header__iconLinkwithSearchBar__rda3A8Xp20: hasVariant(
                    variants,
                    "withSearchBar",
                    "withSearchBar"
                  )
                }
              )}
              icon={
                (
                  hasVariant(
                    variants,
                    "noSearchBarOrSettings",
                    "noSearchBarOrSettings"
                  )
                    ? false
                    : true
                ) ? (
                  <SearchIcon
                    data-plasmic-name={"svg"}
                    data-plasmic-override={overrides.svg}
                    className={classNames(
                      "plasmic_default__all",
                      "plasmic_default__svg",
                      "Header__svg___7Ic5E",
                      {
                        Header__svgnoSearchBarOrSettings___7Ic5Ei2VQm:
                          hasVariant(
                            variants,
                            "noSearchBarOrSettings",
                            "noSearchBarOrSettings"
                          ),

                        Header__svgwithSearchBar___7Ic5E8Xp20: hasVariant(
                          variants,
                          "withSearchBar",
                          "withSearchBar"
                        )
                      }
                    )}
                    role={"img"}
                  />
                ) : null
              }
            />
          ) : null}
          {(
            hasVariant(
              variants,
              "noSearchBarOrSettings",
              "noSearchBarOrSettings"
            )
              ? false
              : true
          )
            ? p.renderPlasmicSlot({
                defaultContents: (
                  <SearchInputComponent
                    className={classNames(
                      "__wab_instance",
                      "Header__searchInputComponent___4TRpX"
                    )}
                    withSearchBar={true}
                  />
                ),

                value: args.searchInputSlot
              })
            : null}
        </p.Stack>
      </p.Stack>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "text", "iconLink", "svg"],
  text: ["text"],
  iconLink: ["iconLink", "svg"],
  svg: ["svg"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHeader__ArgProps,
      internalVariantPropNames: PlasmicHeader__VariantProps
    });

    return PlasmicHeader__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHeader";
  } else {
    func.displayName = `PlasmicHeader.${nodeName}`;
  }
  return func;
}

export const PlasmicHeader = Object.assign(
  // Top-level PlasmicHeader renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),
    iconLink: makeNodeComponent("iconLink"),
    svg: makeNodeComponent("svg"),
    // Metadata about props expected for PlasmicHeader
    internalVariantProps: PlasmicHeader__VariantProps,
    internalArgProps: PlasmicHeader__ArgProps
  }
);

export default PlasmicHeader;
/* prettier-ignore-end */
